name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  app-test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Enable Corepack
        run: corepack enable

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Use latest yarn
        run: make setup.yarn

      - name: Install Dependencies
        run: make install.yarn

      - name: Lint Code
        run: make check.app

  app-build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - app-test
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Enable Corepack
        run: corepack enable

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Use latest yarn
        run: make setup.yarn

      - name: Install Dependencies
        run: make install.yarn

      - name: Build blog
        run: make build

      - name: Archive blog
        uses: actions/upload-artifact@v4
        with:
          name: dist-blog
          path: ./dist

  # app-deploy:
  #   name: Deploy production
  #   runs-on: ubuntu-latest
  #   environment: production
  #   needs:
  #     - app-test
  #     - app-build
  #   steps:
  #     - name: Clone Repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 1
  #
  #     - name: Enable Corepack
  #       run: corepack enable
  #
  #     - name: Install Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: 'yarn'
  #
  #     - name: Use latest yarn
  #       run: make setup.yarn
  #
  #     - name: Install Dependencies
  #       run: make install.yarn
  #
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: eu-central-1
  #         role-to-assume: ${{ secrets.AWS_ROLE_NAME }}
  #
  #     - name: Download blog artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: dist-blog
  #         path: dist
  #
  #     - name: Deploy
  #       run: make deploy

  infra-init:
    name: Init Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - uses: actions/cache@v4
        name: Cache tflint plugins
        with:
          path: ~/.tflint.d/plugins
          key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v4
        name: InstallTFLint
        with:
          tflint_version: v0.52.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE }}

      - name: Init Workspace
        run: make infra.init
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}
          TF_WORKSPACE: staging


      - name: Validate
        run: make check.infra
        env:
          TF_WORKSPACE: staging

  infra-staging:
    name: Infra Staging
    uses: ./.github/workflows/terraform-deploy.yml
    needs:
      - infra-init
    with:
      environment: staging
      terraform-version: 1.12.2
      working-directory: ./infra
    secrets:
      AWS_TERRAFORM_ROLE: ${{ secrets.AWS_TERRAFORM_ROLE }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
