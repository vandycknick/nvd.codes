on:
  workflow_call:
    inputs:
      terraform-version:
        required: true
        type: string

      environment:
        required: true
        type: string

      working-directory:
        required: false
        type: string
        default: .

    secrets:
      AWS_TERRAFORM_ROLE:
        required: true
      CLOUDFLARE_API_TOKEN:
        required: true
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Clone Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Configure Terraform plugin cache
        run: |
          echo "TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache" >>"$GITHUB_ENV"
          mkdir --parents "$HOME/.terraform.d/plugin-cache"

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_TERRAFORM_ROLE }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ inputs.working-directory }}
        env:
          TF_WORKSPACE: ${{ inputs.environment }}

      - name: Terraform Plan
        run: terraform plan -out $HOME/plan
        working-directory: ${{ inputs.working-directory }}
        env:
          TF_WORKSPACE: ${{ inputs.environment }}
          TF_CLI_ARGS_plan: '-var-file=./environments/${{ inputs.environment }}.tfvars'
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
