---
import { SEO } from "astro-seo"
import type { Props as SEOProps } from "astro-seo"
import { ClientRouter } from "astro:transitions"

import "../styles/global.css"
import Header from "@/components/Header.astro"
import { Search } from "@/components/Search.tsx"
import { Footer } from "@/components/Footer"

interface Props {
  title?: string
  description?: string
  openGraph?: SEOProps["openGraph"]
  twitter?: SEOProps["twitter"]
  extend?: SEOProps["extend"]
}

const { title, description, openGraph, twitter, extend } = Astro.props
---

<html class="h-full min-h-screen antialiased" lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="MobileOptimized" content="320" />
    <meta name="author" content="Nick Van Dyck" />
    <link rel="shortcut icon" href="/favicon.png" />

    <meta name="viewport" content="width=device-width, initia-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <SEO
      title={title ?? "Nick Van Dyck"}
      titleTemplate="%s - nvd.sh"
      description={description}
      openGraph={openGraph ?? {
        basic: {
          title: "Nick's blog.",
          type: "website",
          url: "https://nvd.sh",
          image: "",
        },
      }}
      twitter={twitter}
      extend={extend}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <ClientRouter />
    <script is:inline>
      const fetchTheme = () => {
        const localStorageTheme = localStorage?.getItem("theme") ?? ""
        if (["dark", "light"].includes(localStorageTheme)) {
          return localStorageTheme
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark"
        }
        return "light"
      }

      const updateTheme = (doc = document) => {
        const theme = fetchTheme()
        if (theme === "light") {
          doc.documentElement.classList.remove("dark")
        } else {
          doc.documentElement.classList.add("dark")
        }
      }

      const toggleTheme = () => {
        const element = document.documentElement
        element.classList.toggle("dark")

        const isDark = element.classList.contains("dark")
        localStorage.setItem("theme", isDark ? "dark" : "light")
      }

      window.nvd = {
        ...(window.nvd ?? {}),
        fetchTheme,
        toggleTheme,
        updateTheme,
      }

      updateTheme()
    </script>
    <script>
      import { mitt } from "../lib/emitter.ts"
      declare global {
        interface Window {
          nvd: {
            fetchTheme: () => "light" | "dark"
            toggleTheme: () => void
            updateTheme: (doc?: Document) => void
          }
        }
      }
      mitt.on("theme-flip", () => {
        window.nvd.toggleTheme()
        const theme = window.nvd.fetchTheme()
        mitt.emit("theme-updated", { theme })
      })
      document.addEventListener("astro:before-swap", (event) =>
        window.nvd.updateTheme(event.newDocument),
      )
      document.addEventListener("astro:after-swap", () =>
        window.nvd.updateTheme(),
      )
    </script>
  </head>
  <body class="flex flex-col min-h-screen bg-white dark:bg-zinc-950">
    <Search client:only="react" />

    <div class="relative">
      <slot name="background" />
    </div>

    <Header />

    <main
      class="flex-1 w-full max-w-full"
      transition:name="main"
      transition:animate="fade"
    >
      <slot />
    </main>

    <Footer />
    <script>
      document.addEventListener("astro:after-swap", () => {
        if (
          sessionStorage.scrollY !== undefined &&
          sessionStorage.to?.startsWith("/blog")
        ) {
          window.scrollTo(0, Number(sessionStorage.scrollY))
        }
      })

      document.addEventListener("astro:before-swap", (event) => {
        sessionStorage.to = event.to.pathname
        sessionStorage.scrollY = window.scrollY
      })
    </script>
    <script is:inline>
      document.addEventListener("astro:page-load", () => {
        if (window.sa_pageview) window.sa_pageview(window.location.pathname)
      })
    </script>
    <script
      is:inline
      async
      data-auto-collect="false"
      src="https://scripts.simpleanalyticscdn.com/latest.js"></script>
  </body>
</html>
