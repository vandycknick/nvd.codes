---
import { SEO } from "astro-seo"
import type { Props as SEOProps } from "astro-seo"
import { ClientRouter } from "astro:transitions"

import "../styles/global.css"
import Header from "@/components/Header.astro"
import { QuickSearch } from "@/components/QuickSearch"
import { Footer } from "@/components/Footer"

interface Props {
  title?: string
  description?: string
  openGraph?: SEOProps["openGraph"]
  twitter?: SEOProps["twitter"]
  extend?: SEOProps["extend"]
}

const { title, description, openGraph, twitter, extend } = Astro.props
---

<html class="h-full min-h-screen antialiased" lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="MobileOptimized" content="320" />
    <meta name="author" content="Nick Van Dyck" />
    <link rel="shortcut icon" href="/favicon.png" />

    <meta name="viewport" content="width=device-width, initia-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <SEO
      title={title ?? "Nick Van Dyck"}
      titleTemplate="%s - nvd.sh"
      description={description}
      openGraph={openGraph ?? {
        basic: {
          title: "Nick's blog.",
          type: "website",
          url: "https://nvd.sh",
          image: "",
        },
      }}
      twitter={twitter}
      extend={extend}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <script
      is:inline
      async
      defer
      data-astro-rerun
      src="https://scripts.simpleanalyticscdn.com/latest.js"></script>
    <ClientRouter />
    <script is:inline>
      function updateMode() {
        const isSystemDarkMode = darkModeMediaQuery.matches
        const isDarkMode =
          window.localStorage.isDarkMode === "true" ||
          (!("isDarkMode" in window.localStorage) && isSystemDarkMode)

        if (isDarkMode) {
          document.documentElement.classList.add("dark")
        } else {
          document.documentElement.classList.remove("dark")
        }

        if (isDarkMode === isSystemDarkMode) {
          delete window.localStorage.isDarkMode
        }
      }

      function disableTransitionsTemporarily() {
        document.documentElement.classList.add("[&_*]:!transition-none")
        window.setTimeout(() => {
          document.documentElement.classList.remove("[&_*]:!transition-none")
        }, 0)
      }

      function updateModeWithoutTransitions() {
        disableTransitionsTemporarily()
        updateMode()
      }

      const darkModeMediaQuery = window.matchMedia(
        "(prefers-color-scheme: dark)",
      )

      updateMode()
      darkModeMediaQuery.addEventListener(
        "change",
        updateModeWithoutTransitions,
      )
      window.addEventListener("storage", updateModeWithoutTransitions)
      document.addEventListener(
        "astro:after-swap",
        updateModeWithoutTransitions,
      )
    </script>
  </head>
  <body class="flex flex-col min-h-screen bg-white dark:bg-zinc-950">
    <QuickSearch client:only="react" />

    <div class="relative">
      <slot name="background" />
    </div>

    <Header />

    <main
      class="flex-1 w-full max-w-full"
      transition:name="main"
      transition:animate="fade"
    >
      <slot />
    </main>

    <Footer />
    <script>
      document.addEventListener("astro:before-swap", (e) =>
        [...e.newDocument.head.querySelectorAll('link[as="font"]')].forEach(
          (link) => link.remove(),
        ),
      )

      document.addEventListener("astro:after-swap", () => {
        if (
          sessionStorage.scrollY !== undefined &&
          sessionStorage.to?.startsWith("/blog")
        ) {
          window.scrollTo(0, Number(sessionStorage.scrollY))
        }
      })

      document.addEventListener("astro:before-swap", (event) => {
        sessionStorage.to = event.to.pathname
        sessionStorage.scrollY = window.scrollY
      })
    </script>
  </body>
</html>
