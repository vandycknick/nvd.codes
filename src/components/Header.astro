---
import { Container } from "@/components/Container"
import { NavBar } from "@/components/NavBar.tsx"

const path = new URL(Astro.url).pathname
---

<header
  transition:name="header"
  transition:animate="none"
  class="pointer-events-none relative z-50 flex flex-col"
  style={{
    height: "var(--header-height)",
    marginBottom: "var(--header-mb)",
  }}
>
  <div class="top-0 sticky z-10 pt-6 pb-6" data-header-wrapper>
    <Container className="w-full">
      <div class="relative flex gap-4">
        <div class="hidden md:flex flex-1">
          <slot name="head-left" />
        </div>
        <div class="flex flex-1 justify-center">
          <NavBar
            client:load
            transition:name="navbar"
            transition:persist
            items={[
              {
                type: "link",
                name: "Home",
                url: "/",
                icon: "Home",
              },
              {
                type: "link",
                name: "Blog",
                url: "/blog",
                activeLinkMatch: /(^\/blog[/0-9]*)|(^\/post[/\w-]*)/,
              },
              {
                type: "link",
                name: "About",
                url: "/about",
                activeLinkMatch: /^\/about(\/)?$/,
              },
              {
                type: "link",
                name: "Uses",
                url: "/uses",
                activeLinkMatch: /^\/uses(\/)?$/,
              },
              {
                type: "search",
                ref: "Search",
                icon: "Search",
              },
            ]}
            currentPath={path}
            className="h-full"
          />
        </div>
        <div class="hidden md:flex justify-end flex-1"></div>
      </div>
    </Container>
  </div>
</header>

<script>
  import { clamp } from "../utils"

  let header = document.querySelector("[data-header-wrapper]")
  const upDelay = 64
  const downDelay = 0

  function setProperty(property: string, value: string) {
    document.documentElement.style.setProperty(property, value)
  }

  function updateStyles(reset: boolean) {
    if (header == null) return

    const { top, height } = header.getBoundingClientRect()
    const scrollY = clamp(
      window.scrollY,
      0,
      document.body.scrollHeight - window.innerHeight,
    )

    if (reset) {
      setProperty("--header-height", `${downDelay + height}px`)
      setProperty("--header-mb", `${-downDelay}px`)
    }

    if (top + height < -upDelay) {
      const offset = Math.max(height, scrollY - upDelay)
      setProperty("--header-height", `${offset}px`)
      setProperty("--header-mb", `${height - offset}px`)
    } else if (top === 0) {
      setProperty("--header-height", `${scrollY + height}px`)
      setProperty("--header-mb", `${-scrollY}px`)
    }
  }

  document.addEventListener("astro:after-swap", () => {
    header = document.querySelector("[data-header-wrapper]")
    updateStyles(true)
  })
  window.addEventListener("DOMContentLoaded", () => updateStyles(true), false)
  window.addEventListener("scroll", () => updateStyles(false), {
    passive: true,
  })
  window.addEventListener("resize", () => updateStyles(false))
</script>
